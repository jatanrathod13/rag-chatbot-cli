-- 1. Enable the pgvector extension
-- This might require enabling it in the Supabase Dashboard first (Database > Extensions)
-- The command should ideally be run by a user with sufficient privileges.
CREATE EXTENSION IF NOT EXISTS vector WITH SCHEMA extensions;
-- Ensure the schema is correct, Supabase typically uses 'extensions'

-- Helper function to test if vector extension is working
CREATE OR REPLACE FUNCTION test_vector_extension(test_array float[])
RETURNS boolean 
LANGUAGE plpgsql
AS $$
BEGIN
  -- Cast the input array to a vector type and return true if successful
  PERFORM test_array::vector;
  RETURN true;
EXCEPTION
  WHEN OTHERS THEN
    RETURN false;
END;
$$;

-- 2. Create the documents table
CREATE TABLE IF NOT EXISTS public.documents (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    content TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- 3. Create the document_sections table
CREATE TABLE IF NOT EXISTS public.document_sections (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    document_id BIGINT REFERENCES public.documents(id) ON DELETE CASCADE,
    content TEXT,
    embedding VECTOR(1536), -- Match the embedding dimension (1536 for text-embedding-ada-002)
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- 4. Create an index for efficient similarity search (HNSW)
-- Adjust parameters (m, ef_construction) based on expected data size and performance needs
-- Run this *after* potentially inserting some data if needed, or on an empty table.
CREATE INDEX IF NOT EXISTS idx_document_sections_embedding
ON public.document_sections
USING hnsw (embedding vector_cosine_ops) -- Use cosine distance as Supabase recommends for OpenAI embeddings
WITH (m = 16, ef_construction = 64); -- Standard defaults, adjust as needed


-- 5. Create the RPC function for matching sections
CREATE OR REPLACE FUNCTION match_document_sections (
  query_embedding vector(1536), -- Dimension must match your model
  match_threshold float,
  match_count int
)
RETURNS TABLE (
  id bigint,
  document_id bigint,
  content text,
  similarity float
)
LANGUAGE sql STABLE -- Ensures the function doesn't modify the database
AS $$
  SELECT
    ds.id,
    ds.document_id,
    ds.content,
    1 - (ds.embedding <=> query_embedding) AS similarity -- '<=>' is cosine distance, 1 - distance = similarity
  FROM document_sections ds
  WHERE 1 - (ds.embedding <=> query_embedding) > match_threshold
  ORDER BY similarity DESC -- Order by similarity descending
  LIMIT match_count;
$$; 